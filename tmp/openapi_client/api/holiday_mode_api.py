# coding: utf-8

"""
    ONECTA Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing_extensions import Annotated
from openapi_client.models.holiday_mode_body import HolidayModeBody

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class HolidayModeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def gateway_devices_gateway_device_id_management_points_embedded_id_holiday_mode_post(
        self,
        gateway_device_id: Annotated[StrictStr, Field(description="The id of the gatewayDevice to which the managementPoint belongs")],
        embedded_id: Annotated[StrictStr, Field(description="The id of the managementPoint to which the characteristic belongs")],
        holiday_mode_body: HolidayModeBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Add a holiday period

        Insert a holiday period

        :param gateway_device_id: The id of the gatewayDevice to which the managementPoint belongs (required)
        :type gateway_device_id: str
        :param embedded_id: The id of the managementPoint to which the characteristic belongs (required)
        :type embedded_id: str
        :param holiday_mode_body: (required)
        :type holiday_mode_body: HolidayModeBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gateway_devices_gateway_device_id_management_points_embedded_id_holiday_mode_post_serialize(
            gateway_device_id=gateway_device_id,
            embedded_id=embedded_id,
            holiday_mode_body=holiday_mode_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '404': None,
            '409': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def gateway_devices_gateway_device_id_management_points_embedded_id_holiday_mode_post_with_http_info(
        self,
        gateway_device_id: Annotated[StrictStr, Field(description="The id of the gatewayDevice to which the managementPoint belongs")],
        embedded_id: Annotated[StrictStr, Field(description="The id of the managementPoint to which the characteristic belongs")],
        holiday_mode_body: HolidayModeBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Add a holiday period

        Insert a holiday period

        :param gateway_device_id: The id of the gatewayDevice to which the managementPoint belongs (required)
        :type gateway_device_id: str
        :param embedded_id: The id of the managementPoint to which the characteristic belongs (required)
        :type embedded_id: str
        :param holiday_mode_body: (required)
        :type holiday_mode_body: HolidayModeBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gateway_devices_gateway_device_id_management_points_embedded_id_holiday_mode_post_serialize(
            gateway_device_id=gateway_device_id,
            embedded_id=embedded_id,
            holiday_mode_body=holiday_mode_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '404': None,
            '409': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def gateway_devices_gateway_device_id_management_points_embedded_id_holiday_mode_post_without_preload_content(
        self,
        gateway_device_id: Annotated[StrictStr, Field(description="The id of the gatewayDevice to which the managementPoint belongs")],
        embedded_id: Annotated[StrictStr, Field(description="The id of the managementPoint to which the characteristic belongs")],
        holiday_mode_body: HolidayModeBody,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add a holiday period

        Insert a holiday period

        :param gateway_device_id: The id of the gatewayDevice to which the managementPoint belongs (required)
        :type gateway_device_id: str
        :param embedded_id: The id of the managementPoint to which the characteristic belongs (required)
        :type embedded_id: str
        :param holiday_mode_body: (required)
        :type holiday_mode_body: HolidayModeBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gateway_devices_gateway_device_id_management_points_embedded_id_holiday_mode_post_serialize(
            gateway_device_id=gateway_device_id,
            embedded_id=embedded_id,
            holiday_mode_body=holiday_mode_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': None,
            '404': None,
            '409': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gateway_devices_gateway_device_id_management_points_embedded_id_holiday_mode_post_serialize(
        self,
        gateway_device_id,
        embedded_id,
        holiday_mode_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if gateway_device_id is not None:
            _path_params['gatewayDeviceId'] = gateway_device_id
        if embedded_id is not None:
            _path_params['embeddedId'] = embedded_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if holiday_mode_body is not None:
            _body_params = holiday_mode_body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AccessTokenAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/gateway-devices/{gatewayDeviceId}/management-points/{embeddedId}/holiday-mode',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


